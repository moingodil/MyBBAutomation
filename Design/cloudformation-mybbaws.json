{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "CloudFormation automation template which launches an auto-scaling infrastructure for running the MyBB application version 1.8.6. The infrastructure deploys Web Servers over multiple availability zones within a single region",

  "Parameters": {

    "OperatorEmail": {
      "Type": "String",
      "Description": "Email address to notify if there are any issues/alerts.",
      "Default": "moin.godil@gmail.com",
      "AllowedPattern": "\\w[a-zA-Z0-9_\\-\\.]*@\\w[a-zA-Z0-9\\-\\.]*",
      "ConstraintDescription": "Must be a valid email address."
    },

    "WebServerInstanceType": {
      "Type": "String",
      "Description": "The Instance Type of Web Server(EC2).",
      "Default": "t2.medium",
      "AllowedValues": [ "t2.small", "t2.medium", "t2.large", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge" ],
      "ConstraintDescription": "Must be a valid EC2 instance type!"
    },

    "WebServerCount": {
      "Default": 2,
      "Description": "Number of EC2 instances to launch (Desired initial capacity)",
      "Type": "Number",
      "MinValue": 2,
      "MaxValue": 5,
      "ConstraintDescription": "Must be between 2 to 5 EC2 instances.."
    },

    "RDSInstanceType": {
      "Type": "String",
      "Description": "The Instance Type of database(RDS).",
      "Default": "db.t2.medium",
      "AllowedValues": [ "db.t2.medium", "db.t2.large", "db.r3.large", "db.r3.xlarge", "db.r3.2xlarge", "db.r3.4xlarge", "db.r3.8xlarge", "db.m4.large", "db.m4.xlarge", "db.m4.2xlarge", "db.m4.4xlarge", "db.m4.10xlarge", "db.m3.medium", "db.m3.large", "db.m3.xlarge", "db.m3.2xlarge" ],
      "ConstraintDescription": "Must select a valid database instance type."
    },

    "DBName": {
      "Type": "String",
      "Description": "The name for the MyBB database.",
      "MinLength": "4",
      "MaxLength": "20",
      "Default": "myDatabase",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "Must begin with a letter,contain only alphanumeric characters and length should be between 4 to 20 characters"
    },

    "DBUsername": {
	  "NoEcho": "true", 
      "Type": "String",
      "Description": "The username for the MyBB database.",
      "MinLength": "4",
      "MaxLength": "20",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "Must begin with a letter, contain only alphanumeric characters and length should be between 4 to 20 characters"
    },

    "DBPassword": {
      "Type": "String",
      "Description": "The password for the MyBB database.",
      "NoEcho": true,
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "Must contain only alphanumeric characters and length should be between 8 to 41 characters"
    },

    "DBPort": {
      "Type": "Number",
      "Description": "TCP/IP port number for the Database",
      "MinValue": "1024",
      "MaxValue": "65536",
      "Default": 3306,
      "ConstraintDescription": "Must be a valid port number!"
    },

    "SSHKeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair."
    },

    "SSHIPRange": {
      "Type": "String",
      "Description": "The IP address range that can be used to SSH to the EC2 instances",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "BillingThreshold": {
      "Type": "Number",
      "Description": "Notify when the costs exceed this amount in USD.",
      "MinValue": 1,
      "Default": 1000,
      "ConstraintDescription": "Must be a valid USD amount (minimum 1)!"
    },

	"DBAllocatedStorage": {
      "Default": "5",
      "Description": "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription": "must be between 5 and 1024Gb."
    }
	
  },

  "Metadata": {
  },

  "Mappings": {

    "Subnets": {
      "VPC": {
        "CidrBlock": "10.0.0.0/16"
      },
      "WebServerSubnetA": {
        "CidrBlock": "10.0.0.0/20"
      },
      "WebServerSubnetB": {
        "CidrBlock": "10.0.16.0/20"
      },
      "RDSSubnetA": {
        "CidrBlock": "10.0.32.0/20"
      },
      "RDSSubnetB": {
        "CidrBlock": "10.0.48.0/20"
      }
    },

    "AMIByRegion": {
      "us-east-1":      { "hvm64": "ami-60b6c60a" },
      "us-west-1":      { "hvm64": "ami-d5ea86b5" },
      "us-west-2":      { "hvm64": "ami-f0091d91" },
      "eu-west-1":      { "hvm64": "ami-bff32ccc" },
      "eu-central-1":   { "hvm64": "ami-bc5b48d0" },
      "ap-northeast-1": { "hvm64": "ami-383c1956" },
      "ap-southeast-1": { "hvm64": "ami-c9b572aa" },
      "ap-southeast-2": { "hvm64": "ami-48d38c2b" },
      "sa-east-1":      { "hvm64": "ami-6817af04" },
      "cn-north-1":     { "hvm64": "ami-43a36a2e" }
    },

    "ELBAccountIdByRegion": {
      "us-east-1":      { "AccountId": "127311923021" },
      "us-west-1":      { "AccountId": "027434742980" },
      "us-west-2":      { "AccountId": "797873946194" },
      "eu-west-1":      { "AccountId": "156460612806" },
      "eu-central-1":   { "AccountId": "589561097549" },
      "ap-northeast-1": { "AccountId": "582318560864" },
      "ap-southeast-1": { "AccountId": "114774131450" },
      "ap-southeast-2": { "AccountId": "783225319266" },
      "sa-east-1":      { "AccountId": "507241528517" },
      "cn-north-1":     { "AccountId": "638102146993" }
    },

	"AWSRegionCapabilities" : {
      "us-east-1"      : { "RDSMultiAZ" : "true" },
      "us-west-1"      : { "RDSMultiAZ" : "true" },
      "eu-west-1"      : { "RDSMultiAZ" : "true" },
      "ap-southeast-1" : { "RDSMultiAZ" : "true" },
      "ap-northeast-1" : { "RDSMultiAZ" : "true" }
    }
  },

  "Conditions": {
  },

  "Resources": {

    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true,
        "CidrBlock": { "Fn::FindInMap": [ "Subnets", "VPC", "CidrBlock" ]},
		"Tags" : [{ "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } } ]		
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway"
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "InternetGatewayId": { "Ref": "InternetGateway" }
      }
    },

    "WebServerSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "AvailabilityZone": {
          "Fn::Select": [ "0", { "Fn::GetAZs": "" } ]
        },
        "CidrBlock": { "Fn::FindInMap": [ "Subnets", "WebServerSubnetA", "CidrBlock" ] },
        "MapPublicIpOnLaunch": true
      }
    },
    "WebServerSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "AvailabilityZone": {
          "Fn::Select": [ "1", { "Fn::GetAZs": "" } ]
        },
        "CidrBlock": { "Fn::FindInMap": [ "Subnets", "WebServerSubnetB", "CidrBlock" ] },
        "MapPublicIpOnLaunch": true
      }
    },

    "RDSSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "AvailabilityZone": {
          "Fn::Select": [ "0", { "Fn::GetAZs": "" } ]
        },
        "CidrBlock": { "Fn::FindInMap": [ "Subnets", "RDSSubnetA", "CidrBlock" ] }
      }
    },
    "RDSSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "AvailabilityZone": {
          "Fn::Select": [ "1", { "Fn::GetAZs": "" } ]
        },
        "CidrBlock": { "Fn::FindInMap": [ "Subnets", "RDSSubnetB", "CidrBlock" ] }
      }
    },

    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": { "Ref": "VPC" },
        "GroupDescription": "Internet-facing security group, mainly for web servers.",
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 80,
            "ToPort": 80,
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "ToPort": 443,
            "IpProtocol": "tcp"
          },
          {
            "CidrIp": { "Ref": "SSHIPRange" },
            "FromPort": 22,
            "ToPort": 22,
            "IpProtocol": "tcp"
          }
        ]
      }
    },
    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "EC2VpcId" : { "Ref" : "VPC" },
        "GroupDescription": "Private security group, mainly for backend database servers.",
        "DBSecurityGroupIngress" : {
          "EC2SecurityGroupId" : { "Ref" : "WebServerSecurityGroup" } 
        }
        
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" }
      }
    },
    "RouteToInternet": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": { "Ref": "InternetGateway" },
        "RouteTableId": { "Ref": "RouteTable" }
      }
    },
    "WebServerSubnetARouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "SubnetId": { "Ref": "WebServerSubnetA" }
      }
    },
    "WebServerSubnetBRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "SubnetId": { "Ref": "WebServerSubnetB" }
      }
    },

    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": { "Ref": "VPC" }
      }
    },
    "RDSSubnetARouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRouteTable" },
        "SubnetId": { "Ref": "RDSSubnetA" }
      }
    },
    "RDSSubnetBRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": { "Ref": "PrivateRouteTable" },
        "SubnetId": { "Ref": "RDSSubnetB" }
      }
    },
    "DBSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "This is the group of (private) subnets available for RDS.",
        "SubnetIds": [
          { "Ref": "RDSSubnetA" },
          { "Ref": "RDSSubnetB" }
        ]
      }
    },
    "MasterDB": {
      "Type": "AWS::RDS::DBInstance",
	  "DependsOn": "DBSecurityGroup",
      "Properties": {
	    "DBName": { "Ref": "DBName" },
		"AllocatedStorage": { "Ref": "DBAllocatedStorage" },
		"DBInstanceClass": { "Ref": "RDSInstanceType" },
        "Engine": "MySQL",
		"DBSecurityGroups" : [ { "Ref" : "DBSecurityGroup" } ], 
        "DBSubnetGroupName": { "Ref": "DBSubnetGroup" },
        "MultiAZ" : { "Fn::FindInMap" : [ "AWSRegionCapabilities", { "Ref" : "AWS::Region" }, "RDSMultiAZ"] },
        "MasterUsername": { "Ref": "DBUsername" },
        "MasterUserPassword": { "Ref": "DBPassword" },
        "Port": { "Ref": "DBPort" },
        "Tags": [ { "Key": "Name", "Value": "Master Database" } ]
      }
    },
	
    "SlaveDB": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "Engine": "MySQL",
		"SourceDBInstanceIdentifier": { "Ref": "MasterDB" },
        "AvailabilityZone": { "Fn::GetAtt": [ "RDSSubnetB", "AvailabilityZone" ] },
        "DBInstanceClass": { "Ref": "RDSInstanceType" },
        "Tags": [ { "Key": "Name", "Value": "Read Replica Database" } ]
      }
    },
	
    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          { "Endpoint": { "Ref": "OperatorEmail" }, "Protocol": "email" }
        ]
      }
    },

    "S3LogBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain"
    },
    "S3LogBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": { "Ref": "S3LogBucket" },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Resource": { "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "S3LogBucket" }, "/*" ]] },
              "Principal": {
                "AWS": { "Fn::FindInMap": [ "ELBAccountIdByRegion", { "Ref": "AWS::Region" }, "AccountId" ] }
              },
              "Action": [ "s3:PutObject" ]
            }
          ]
        }
      }
    },

    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn": "S3LogBucketPolicy",
      "Properties": {
        "Scheme": "internet-facing",
        "CrossZone": true,
        "SecurityGroups": [
          { "Ref": "WebServerSecurityGroup" }
        ],
        "Subnets": [
          { "Ref": "WebServerSubnetA" },
          { "Ref": "WebServerSubnetB" }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "10",
          "Timeout": "5"
        },
        "AccessLoggingPolicy": {
          "S3BucketName": { "Ref": "S3LogBucket" },
          "S3BucketPrefix": "elb-www-logs",
          "Enabled": "true",
          "EmitInterval": "5"
        }
      }
    },

    "AutoScalingWebServerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          { "Ref": "WebServerSubnetA" },
          { "Ref": "WebServerSubnetB" }
        ],
        "LoadBalancerNames": [
          { "Ref": "ElasticLoadBalancer" }
        ],
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": 120,
        "MinSize": 2,
        "MaxSize": 100,
        "DesiredCapacity": { "Ref": "WebServerCount" },
        "LaunchConfigurationName": { "Ref": "WebServerLaunchConfiguration" },
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "NotificationConfigurations": [
          {
            "TopicARN": { "Ref": "NotificationTopic" },
            "NotificationTypes": [
              "autoscaling:EC2_INSTANCE_LAUNCH",
              "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
              "autoscaling:EC2_INSTANCE_TERMINATE",
              "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
            ]
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": 2,
          "MaxBatchSize": 1,
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "WebServerScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "AutoScalingWebServerGroup" },
        "AdjustmentType": "ChangeInCapacity",
        "ScalingAdjustment": 1,
        "Cooldown": 60
      }
    },
    "WebServerScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AutoScalingGroupName": { "Ref": "AutoScalingWebServerGroup" },
        "AdjustmentType": "ChangeInCapacity",
        "ScalingAdjustment": -1,
        "Cooldown": 60
      }
    },
    "WebServerCpuHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "When CPU usage exceeds 70% for 10 minutes, scale-up",
        "Namespace": "AWS/EC2",
        "MetricName": "CPUUtilization",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "70",
        "ComparisonOperator": "GreaterThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AutoScalingWebServerGroup" }
          }
        ],
        "AlarmActions": [
          { "Ref": "WebServerScaleUpPolicy" }
        ]
      }
    },
    "WebServerCpuLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "When CPU usage is below 40% for 10 minutes, scale-down",
        "Namespace": "AWS/EC2",
        "MetricName": "CPUUtilization",
        "Statistic": "Average",
        "Period": "300",
        "EvaluationPeriods": "2",
        "Threshold": "40",
        "ComparisonOperator": "LessThanThreshold",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "AutoScalingWebServerGroup" }
          }
        ],
        "AlarmActions": [
          { "Ref": "WebServerScaleDownPolicy" }
        ]
      }
    },

    "WebServerLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",

      "Metadata": {
        "Comment": "Install MyBB application with dependencies.",
        "AWS::CloudFormation::Init": {
          "config": {

            "packages": {
              "yum": {
                "httpd": [],
                "php": [],
                "php-gd": [],
                "php-mbstring": [],
                "php-mysqlnd": [],
                "mysql": []
              }
            },

            "sources": {
              "/tmp/mybb": "https://github.com/moingodil/cloudformation-mybb/tarball/master"
            },

            "files": {
              "/etc/cfn/cfn-hup.conf": {
                "content": { "Fn::Join": ["", [
                  "[main]\n",
                  "stack=", { "Ref": "AWS::StackId" }, "\n",
                  "region=", { "Ref": "AWS::Region" }, "\n"
                ]]},
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": { "Fn::Join": ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WebServerLaunchConfiguration.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "   --stack ", { "Ref": "AWS::StackName" },
                  "   --resource WebServerLaunchConfiguration ",
                  "   --region ", { "Ref": "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "commands": {
              "install": {
                "command": "/bin/bash ./install.sh",
                "cwd": "/tmp/mybb/Source",
                "env": {
                  "MYBB_DOMAINNAME": { "Fn::GetAtt": [ "ElasticLoadBalancer", "DNSName" ] },
                  "MYBB_ADMINEMAIL": { "Ref": "OperatorEmail" },
                  "MYBB_DBNAME": { "Ref": "DBName" },
                  "MYBB_DBUSERNAME": { "Ref": "DBUsername" },
                  "MYBB_DBPASSWORD": { "Ref": "DBPassword" },
                  "MYBB_DBHOSTNAME": { "Fn::GetAtt": [ "MasterDB", "Endpoint.Address" ] },
                  "MYBB_DBPORT": { "Ref": "DBPort" }
                }
              }
            },

            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }

          }
        }
      },

      "Properties": {
        "KeyName": { "Ref": "SSHKeyName" },
        "SecurityGroups": [
          { "Ref": "WebServerSecurityGroup" }
        ],
        "InstanceType": { "Ref": "WebServerInstanceType" },
        "ImageId": { "Fn::FindInMap": [ "AMIByRegion", { "Ref": "AWS::Region" }, "hvm64" ] },
        "UserData": { "Fn::Base64": { "Fn::Join": ["", [
          "#!/bin/bash -xe\n",
          "yum update -y aws-cfn-bootstrap\n",

          "/opt/aws/bin/cfn-init -v ",
          "   --stack ", { "Ref": "AWS::StackName" },
          "   --resource WebServerLaunchConfiguration ",
          "   --region ", { "Ref": "AWS::Region" }, "\n",

          "/opt/aws/bin/cfn-signal -e $? ",
          "   --stack ", { "Ref": "AWS::StackName" },
          "   --resource AutoScalingWebServerGroup ",
          "   --region ", { "Ref": "AWS::Region" }, "\n"
        ]]}}
      }
    },

    "BillingAllarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "AlarmDescription": { "Fn::Join": ["", [
          "Alarm if Monthly costs exceeds in USD ",
          { "Ref": "BillingThreshold" }
        ]]},
        "Namespace": "AWS/Billing",
        "MetricName": "EstimatedCharges",
        "Dimensions": [{
          "Name": "Currency",
          "Value": "USD"
        }],
        "Statistic": "Maximum",
        "Period": "21600",
        "EvaluationPeriods": "1",
        "Threshold": { "Ref": "BillingThreshold" },
        "ComparisonOperator": "GreaterThanThreshold",
        "AlarmActions": [{
          "Ref": "NotificationTopic"
        }],
        "InsufficientDataActions": [{
          "Ref": "NotificationTopic"
        }]
      }
    }

  },

  "Outputs": {
    "ElasticLoadBalancerDNSName": {
      "Description": "The DNSName of the main load balancer.",
      "Value": {
        "Fn::GetAtt": [ "ElasticLoadBalancer", "DNSName" ]
      }
    }
  }

}